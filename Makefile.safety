# Safety Features Implementation Makefile
# Supports phased implementation of Squid-inspired safety features

.PHONY: help test-phase verify-task safety-check bench-compare status

help: ## Show safety implementation help
	@echo "Safety Features Implementation"
	@echo "=============================="
	@echo ""
	@echo "Phases:"
	@echo "  1. Memory Safety    - Prevent OOM crashes"
	@echo "  2. Request Safety   - Prevent DoS attacks"  
	@echo "  3. Error Handling   - Prevent panics"
	@echo "  4. Logging         - Enable debugging"
	@echo "  5. Cache Intel     - Improve correctness"
	@echo "  6. Security        - Harden deployment"
	@echo ""
	@echo "Commands:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "  %-20s %s\n", $$1, $$2}'

test-phase: ## Test all tasks in a phase (PHASE=1-6)
	@if [ -z "$(PHASE)" ]; then \
		echo "Error: PHASE not specified. Use: make test-phase PHASE=1"; \
		exit 1; \
	fi
	@echo "Testing Phase $(PHASE) tasks..."
	@cargo test --test phase$(PHASE)_tests

verify-task: ## Verify specific task completion (TASK=1.1)
	@if [ -z "$(TASK)" ]; then \
		echo "Error: TASK not specified. Use: make verify-task TASK=1.1"; \
		exit 1; \
	fi
	@echo "Verifying Task $(TASK)..."
	@cargo test test_task_$$(echo $(TASK) | tr '.' '_')

safety-check: ## Check for unsafe patterns
	@echo "🔍 Safety Check"
	@echo "==============="
	@echo ""
	@echo "Checking for unwrap() calls..."
	@grep -n "\.unwrap()" src/*.rs || echo "✅ No unwrap() calls found"
	@echo ""
	@echo "Checking for expect() without context..."
	@grep -n "\.expect(\"\")" src/*.rs || echo "✅ No empty expect() messages"
	@echo ""
	@echo "Checking for println! in async..."
	@grep -n "println!" src/*.rs || echo "✅ No println! calls found"
	@echo ""
	@echo "Checking for panic! calls..."
	@grep -n "panic!" src/*.rs || echo "✅ No panic! calls found"
	@echo ""
	@echo "Checking for let _ = patterns..."
	@grep -n "let _" src/*.rs | grep -v "let _unused" || echo "✅ No ignored Results"

bench-compare: ## Run benchmarks and compare
	@echo "📊 Running benchmarks..."
	@cargo bench --bench cache_bench | tee bench-new.txt
	@if [ -f bench-baseline.txt ]; then \
		echo ""; \
		echo "Comparing with baseline..."; \
		diff -u bench-baseline.txt bench-new.txt || true; \
	else \
		echo "No baseline found. Creating..."; \
		mv bench-new.txt bench-baseline.txt; \
	fi

status: ## Show implementation status
	@echo "📋 Safety Features Implementation Status"
	@echo "========================================"
	@echo ""
	@echo "Phase 1: Memory Safety"
	@cargo test test_cache_size_limit --quiet 2>/dev/null && echo "  ✅ 1.1: Total cache size limit" || echo "  ❌ 1.1: Total cache size limit"
	@cargo test test_entry_size_limit --quiet 2>/dev/null && echo "  ✅ 1.2: Per-entry size limit" || echo "  ❌ 1.2: Per-entry size limit"
	@cargo test test_memory_pressure --quiet 2>/dev/null && echo "  ✅ 1.3: Memory pressure detection" || echo "  ❌ 1.3: Memory pressure detection"
	@echo ""
	@echo "Phase 2: Request Safety"
	@cargo test test_request_limits --quiet 2>/dev/null && echo "  ✅ 2.1: Request size limits" || echo "  ❌ 2.1: Request size limits"
	@cargo test test_request_timeout --quiet 2>/dev/null && echo "  ✅ 2.2: Request timeout" || echo "  ❌ 2.2: Request timeout"
	@cargo test test_connection_limits --quiet 2>/dev/null && echo "  ✅ 2.3: Connection limits" || echo "  ❌ 2.3: Connection limits"
	@echo ""
	@echo "Phase 3: Error Handling"
	@grep -c "unwrap()" src/*.rs | grep -q "^0$$" && echo "  ✅ 3.1: No unwrap() calls" || echo "  ❌ 3.1: unwrap() calls remain"
	@cargo test test_error_propagation --quiet 2>/dev/null && echo "  ✅ 3.2: Error propagation" || echo "  ❌ 3.2: Error propagation"
	@cargo test test_error_recovery --quiet 2>/dev/null && echo "  ✅ 3.3: Error recovery" || echo "  ❌ 3.3: Error recovery"
	@echo ""
	@echo "Phase 4: Logging & Monitoring"
	@grep -c "println!" src/*.rs | grep -q "^0$$" && echo "  ✅ 4.1: Async logging" || echo "  ❌ 4.1: println! calls remain"
	@cargo test test_metrics --quiet 2>/dev/null && echo "  ✅ 4.2: Metrics collection" || echo "  ❌ 4.2: Metrics collection"
	@cargo test test_health_check --quiet 2>/dev/null && echo "  ✅ 4.3: Health check endpoint" || echo "  ❌ 4.3: Health check endpoint"
	@echo ""
	@echo "Phase 5: Cache Intelligence"
	@cargo test test_cache_control --quiet 2>/dev/null && echo "  ✅ 5.1: Cache-Control parser" || echo "  ❌ 5.1: Cache-Control parser"
	@cargo test test_vary_header --quiet 2>/dev/null && echo "  ✅ 5.2: Vary header support" || echo "  ❌ 5.2: Vary header support"
	@cargo test test_conditional_requests --quiet 2>/dev/null && echo "  ✅ 5.3: Conditional requests" || echo "  ❌ 5.3: Conditional requests"
	@echo ""
	@echo "Phase 6: Security"
	@cargo test test_acl --quiet 2>/dev/null && echo "  ✅ 6.1: ACL support" || echo "  ❌ 6.1: ACL support"
	@cargo test test_request_sanitization --quiet 2>/dev/null && echo "  ✅ 6.2: Request sanitization" || echo "  ❌ 6.2: Request sanitization"
	@cargo test test_rate_limiting --quiet 2>/dev/null && echo "  ✅ 6.3: Rate limiting" || echo "  ❌ 6.3: Rate limiting"

fuzz: ## Run fuzzing tests
	@echo "🔨 Fuzzing cache proxy..."
	@cargo +nightly fuzz run fuzz_request_parser -- -max_total_time=60

coverage-report: ## Generate coverage report for safety features
	@echo "📊 Generating coverage report..."
	@cargo tarpaulin --out Html --output-dir coverage \
		--exclude-files "*/tests/*" \
		--exclude-files "*/benches/*"

create-test-skeleton: ## Create test skeleton for a task (TASK=1.1)
	@if [ -z "$(TASK)" ]; then \
		echo "Error: TASK not specified. Use: make create-test-skeleton TASK=1.1"; \
		exit 1; \
	fi
	@echo "Creating test skeleton for Task $(TASK)..."
	@./scripts/create-test-skeleton.sh $(TASK)

# Development helpers
watch-tests: ## Watch and run tests on file changes
	@cargo watch -x test

check-dependencies: ## Check for outdated dependencies
	@cargo outdated

clean-safety: ## Clean safety test artifacts
	@rm -f bench-*.txt
	@rm -rf coverage/
	@cargo clean